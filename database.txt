Database Design:

https://mongoosejs.com/docs/api.html#model_Model-find

student={
	"studentID": [mongoDB];
	"studentName": string, required;
	"studentEmail": email, unique, required;
	"studentPassword": password, required;
	"resume": file,
	"Coverletter": file,
	"transcript": file,
}
controllers: getAllStudents() "GET" ; addStudent() "POST"; updateStudent() "PATCH"*uploads the resume, coverletter, transcript*; deleteStudent() "delete"; getStudentById() "GET";
client pages: profile page, applied to page (and indv), job postings page

jobPosting={
	"jobPostingID":[mongoID];
	"employerID": string, required;
	"title": string, required;
	"expirationDate": date (year-mm-dd), required;
	"location": |string, required;
	description: string, required
	organizationName: String,
}
controllers: addPosting() "POST"; updatePosting()"PATCH"; getPosting() "GET"; deletePosting() "DELTE"; getAllPostings() "GET"; getPostingById()"GET";

application={
	"applicationID": [mongoDB];
	"studentID": student mongodb id, required;
	"studentName": string
	"studentResume": file,
	"title": string
	"organizationName": string
	"studentEmail":string
	"postingID": string
	"extraDetails": string;
	"applicationStatus": string
}
controllers: addApplication() "POST"; getAllApplications() "GET"; updateApplication()"PATCH"; deleteApplication() "DELTE"; getApplicationById() "GET";  getPostingApplications()"GET"; getStudentApplications()"GET";

employer={
	"employerID": [mongoDB];
	"name": string, required;
	"email": email, unique, required;
	"password": password, required;
	"organizationName": string, required
	"category": string
	"postings": comma seperated string
	"applications":  comma seperated string
}
controllers: createEmployer() "POST"; getEmployer() "GET"; updateEmployer() "PUT"; getAllEmployers() "GET"
client pages: profile page, postingPage(edit/add), job postings page- applications


file: downloadFile()"POST";


****** MAY IMPLEMENT ADMIN AS AN ADDTIONAL FEATURE******
Admin={
	"AdminID": [mongoDB];
	"name": string, required;
	"email": email, unique, required;
	"password": password, required;
}
controllers: createAdmin() "POST" ; getAdmin() "GET"; updateAdmin() "PUT"; 
client pages: profile page, view all students, employers, postings and applications
